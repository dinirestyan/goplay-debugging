// Code generated by MockGen. DO NOT EDIT.
// Source: models/user_models.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	models "github.com/dinirestyan/goplay-debugging/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGoplayRepo is a mock of GoplayRepo interface.
type MockGoplayRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGoplayRepoMockRecorder
}

// MockGoplayRepoMockRecorder is the mock recorder for MockGoplayRepo.
type MockGoplayRepoMockRecorder struct {
	mock *MockGoplayRepo
}

// NewMockGoplayRepo creates a new mock instance.
func NewMockGoplayRepo(ctrl *gomock.Controller) *MockGoplayRepo {
	mock := &MockGoplayRepo{ctrl: ctrl}
	mock.recorder = &MockGoplayRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoplayRepo) EXPECT() *MockGoplayRepoMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockGoplayRepo) Login(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGoplayRepoMockRecorder) Login(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGoplayRepo)(nil).Login), email)
}
